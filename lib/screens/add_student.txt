

import 'package:app/db/db_functions.dart';
import 'package:app/model/student_model.dart';
import 'package:app/provider/provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class ScreenInput extends StatelessWidget {
  ScreenInput({
    super.key,
  });
  final _nameController = TextEditingController();

  final _ageController = TextEditingController();

  final _placeController = TextEditingController();

  final _numberController = TextEditingController();

  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add student'),
        centerTitle: true,
        elevation: 3,
      ),
      body: SafeArea(
          child: Padding(
        padding: const EdgeInsets.all(25.0),
        child: SingleChildScrollView(
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                const SizedBox(
                  height: 20,
                ),
                TextFormField(
                  controller: _nameController,
                  decoration: const InputDecoration(
                      label: Text('Name'),
                      border: OutlineInputBorder(
                          borderRadius:
                              BorderRadius.all(Radius.circular(10.0))),
                      prefixIcon: Icon(Icons.person)),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'field Should be filled';
                    } else if (!RegExp(r'^[a-z A-Z]+$').hasMatch(value)) {
                      return 'only Alphabets allowed';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 18),
                TextFormField(
                  keyboardType: TextInputType.number,
                  controller: _ageController,
                  decoration: const InputDecoration(
                      label: Text('Age'),
                      prefixIcon: Icon(Icons.calendar_today),
                      border: OutlineInputBorder(
                          borderRadius:
                              BorderRadius.all(Radius.circular(10.0)))),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'field Should be filled';
                    } else if (!RegExp(r'^(\d+)$').hasMatch(value)) {
                      return 'Age should be in numbers upto 3 digits';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 18),
                TextFormField(
                  controller: _placeController,
                  decoration: const InputDecoration(
                    prefixIcon: Icon(Icons.place),
                    label: Text('Place'),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'field Should be filled';
                    } else if (!RegExp(r'^[a-z A-Z]+$').hasMatch(value)) {
                      return 'only Alphabets allowed';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 18),
                TextFormField(
                  keyboardType: TextInputType.number,
                  controller: _numberController,
                  decoration: const InputDecoration(
                    prefixIcon: Icon(Icons.phone),
                    label: Text('Phone Number'),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'field Should be filled';
                    } else if (value.trim().length != 10) {
                      return 'Enter valid 10 digit contact number ';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 18),
                ElevatedButton.icon(
                  onPressed: () {
                    final isValid = _formKey.currentState!.validate();
                    if (isValid) {
                      saveStudent(context);
                    }
                  },
                  icon: const Icon(Icons.save),
                  label: const Text('SAVE'),
                ),
                const SizedBox(height: 10),
              ],
            ),
          ),
        ),
      )),
    );
  }

  saveStudent(BuildContext context) {
    final name = _nameController.text.trim();
    final age = _ageController.text.trim();
    final place = _placeController.text.trim();
    final number = _numberController.text.trim();
    showDialog<String>(
      context: context,
      builder: (BuildContext cntxt) => AlertDialog(
        title: const Text('Save'),
        content: const Text('Are you sure want to save?'),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              _nameController.clear();
              _ageController.clear();
              _placeController.clear();
              _numberController.clear();

              Navigator.pop(cntxt, 'Cancel');
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              final StudentModel student = StudentModel(
                name: name,
                age: age,
                place: place,
                number: number,
              );
             Provider.of<StudentProvider>(context,listen: false).addStudent(student);
              Navigator.of(cntxt).pop();
              Navigator.of(cntxt).pop();
              SnackBar snackBar =
                  const SnackBar(content: Text('Student Details Saved'));
              ScaffoldMessenger.of(cntxt).showSnackBar(snackBar);
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}
